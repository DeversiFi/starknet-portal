# this file is based on /etc/nginx/nginx.conf from nginxinc/nginx-unprivileged:alpine docker image extracted
# as described here: https://github.com/docker-library/docs/tree/master/nginx#complex-configuration
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /tmp/nginx.pid;
events {
    worker_connections  1024;
}
http {
    proxy_temp_path /tmp/proxy_temp;
    client_body_temp_path /tmp/client_temp;
    fastcgi_temp_path /tmp/fastcgi_temp;
    uwsgi_temp_path /tmp/uwsgi_temp;
    scgi_temp_path /tmp/scgi_temp;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    # Log in json format since this will be automatically parted by
    # stackdriver, which makes it possible to perform complex queries on the
    # logs, which helps with generating log based metrics.
    log_format json_combined escape=json '{'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"bytes_sent":"$bytes_sent",'
        '"http_host":"$http_host",'
        '"http_user_agent":"$http_user_agent",'
        '"msec":"$msec",'
        '"remote_addr":"$remote_addr",'
        '"request_length":"$request_length",'
        '"request_method":"$request_method",'
        '"request_uri":"$request_uri",'
        '"server_port":"$server_port",'
        '"server_protocol":"$server_protocol",'
        '"ssl_protocol":"$ssl_protocol",'
        '"status":"$status",'
        '"upstream_response_time":"$upstream_response_time",'
        '"upstream_addr":"$upstream_addr",'
        '"upstream_connect_time":"$upstream_connect_time"'
    '}';
    access_log  /var/log/nginx/access.log  json_combined;
    sendfile        on;
    #tcp_nopush     on;
    # This is a recommended setting when running behind GCLB
    # see: https://cloud.google.com/load-balancing/docs/https/#timeouts_and_retries
    keepalive_timeout  620;
    # This is the maximum amount of request that can be made on single keep-alive connection.
    keepalive_requests 10000;
    gzip  on;
    # When running behind GCLB nginx chooses not to compress due to `via: 1.1 google` header added
    # by GCLB. We need the following tow lines to force compression.
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    # This is copied from /etc/nginx/conf.d/default.conf on the
    # nginxinc/nginx-unprivileged:alpine docker image
    
    # Extract host from referer header to compare to own host
    map $http_referer $referer_host {
         ~^(?:https?:\/\/)?(?:[^@\/\n]+@)?(?:www\.)?([^:\/\n]+) $1;
    }

    map $skip_ref_cookie $referer_cookie {
        true    "";
        false   "referer=$http_referer; Path=/;";
        default "";
    }

    server {
        listen       8080;
        server_name  localhost;
        index  index.html index.htm;

        location / {
            return 200;
        }

        location /starknet-portal {
            set $skip_ref_cookie "";

            if ($referer_host = $host) {
                set $skip_ref_cookie true;
            }
            if ($referer_host != $host) {
                set $skip_ref_cookie false;
            }
            if ($referer_host = "") {
                set $skip_ref_cookie true;
            }

            add_header Set-Cookie $referer_cookie;

            if (!-e $request_filename) {
                rewrite ^(.+)$ /index.html;
            }

            root   /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
        }
        location = /index.html {
            internal;
            add_header Cache-Control 'no-cache, must-revalidate';

            root   /usr/share/nginx/html;
        }
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
        # Redirect to https if we are behind GCLB and the original protocol was http
        #if ($http_x_forwarded_proto = "http") { return 301 https://$host$request_uri; }
    }
    # Add headers needed for caching with Google Cloud CDN to work.
    # See: https://cloud.google.com/cdn/docs/caching#cacheability
    # and for large files: https://cloud.google.com/cdn/docs/caching#byte-range-requests
    # Nginx already adds Content-Length, Accept-Ranges: bytes, Content-Range, and Last-Modified
    expires 2d;
    add_header Cache-Control "public, no-transform";
}
